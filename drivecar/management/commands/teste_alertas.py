from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from drivecar.models import Veiculo, Peca, RegistroManutencao, Marca, Modelo, Versao
from datetime import datetime, timedelta
import random

class Command(BaseCommand):
    help = 'Cria dados de teste para demonstrar o sistema de alertas'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üöó Iniciando cria√ß√£o de dados de teste para alertas...'))
        
        # 1. Criar usu√°rio de teste (se n√£o existir)
        user, created = User.objects.get_or_create(
            username='teste_alertas',
            defaults={
                'first_name': 'Teste',
                'email': 'teste@alertas.com'
            }
        )
        if created:
            user.set_password('123456')
            user.save()
            self.stdout.write(f'‚úÖ Usu√°rio criado: {user.username}')
        else:
            self.stdout.write(f'üë§ Usu√°rio j√° existe: {user.username}')

        # 2. Verificar se temos marcas/modelos
        marca_ford = Marca.objects.filter(nome__icontains='FORD').first()
        if not marca_ford:
            self.stdout.write(self.style.ERROR('‚ùå Marca FORD n√£o encontrada. Execute o comando de importa√ß√£o de ve√≠culos primeiro.'))
            return

        modelo_ka = Modelo.objects.filter(marca=marca_ford, nome__icontains='Ka').first()
        if not modelo_ka:
            self.stdout.write(self.style.ERROR('‚ùå Modelo Ka n√£o encontrado.'))
            return

        # 3. Criar ve√≠culo de teste com situa√ß√£o cr√≠tica
        veiculo_teste = Veiculo.objects.filter(usuario=user, marca=marca_ford).first()
        if not veiculo_teste:
            veiculo_teste = Veiculo.objects.create(
                usuario=user,
                marca=marca_ford,
                modelo=modelo_ka,
                ano=2020,
                placa='TST-1234',
                km_atual=45000,  # KM alto para gerar alertas
                combustivel='FLEX'
            )
            self.stdout.write(f'üöó Ve√≠culo criado: {veiculo_teste}')
        else:
            # Atualizar KM para cen√°rio de teste
            veiculo_teste.km_atual = 45000
            veiculo_teste.save()
            self.stdout.write(f'üîÑ Ve√≠culo atualizado: {veiculo_teste}')

        # 4. Obter pe√ßas para criar registros
        peca_oleo = Peca.objects.filter(nome__icontains='√ìleo').first()
        peca_filtro_ar = Peca.objects.filter(nome__icontains='Filtro de ar').first()
        peca_filtro_combustivel = Peca.objects.filter(nome__icontains='Filtro de combust√≠vel').first()
        peca_velas = Peca.objects.filter(nome__icontains='Vela').first()

        if not all([peca_oleo, peca_filtro_ar, peca_filtro_combustivel, peca_velas]):
            self.stdout.write(self.style.ERROR('‚ùå Algumas pe√ßas n√£o foram encontradas. Verifique se o banco est√° populado.'))
            return

        # 5. Limpar registros antigos deste ve√≠culo
        RegistroManutencao.objects.filter(veiculo=veiculo_teste).delete()
        self.stdout.write('üßπ Registros antigos limpos')

        # 6. Criar cen√°rios de teste espec√≠ficos
        self.stdout.write('\nüìã Criando cen√°rios de teste...')

        # CEN√ÅRIO 1: √ìleo VENCIDO (√∫ltima troca h√° mais de 10.000 km)
        if peca_oleo:
            registro_oleo = RegistroManutencao.objects.create(
                veiculo=veiculo_teste,
                peca=peca_oleo,
                data=datetime.now() - timedelta(days=120),
                km=34000,  # 11.000 km atr√°s (45000 - 34000 = 11000)
                preco=89.90,
                troca=True,
                garantia_meses=3,
                observacoes='√öltima troca de √≥leo - CEN√ÅRIO TESTE: VENCIDO'
            )
            self.stdout.write('üî¥ URGENTE: √ìleo vencido h√° 1.000 km (√∫ltima: 34.000 km)')

        # CEN√ÅRIO 2: Filtro de ar ATEN√á√ÉO (pr√≥ximo do vencimento)
        if peca_filtro_ar:
            registro_filtro = RegistroManutencao.objects.create(
                veiculo=veiculo_teste,
                peca=peca_filtro_ar,
                data=datetime.now() - timedelta(days=90),
                km=43000,  # 2.000 km atr√°s, pr√≥ximo dos 15.000 km
                preco=45.50,
                troca=True,
                garantia_meses=6,
                observacoes='√öltima troca filtro ar - CEN√ÅRIO TESTE: ATEN√á√ÉO'
            )
            self.stdout.write('üü° ATEN√á√ÉO: Filtro de ar em 2.000 km (pr√≥xima: 58.000 km)')

        # CEN√ÅRIO 3: Filtro combust√≠vel URGENTE (quase vencido)
        if peca_filtro_combustivel:
            registro_combustivel = RegistroManutencao.objects.create(
                veiculo=veiculo_teste,
                peca=peca_filtro_combustivel,
                data=datetime.now() - timedelta(days=200),
                km=44500,  # 500 km atr√°s, muito pr√≥ximo
                preco=78.00,
                troca=True,
                garantia_meses=12,
                observacoes='√öltima troca filtro combust√≠vel - CEN√ÅRIO TESTE: URGENTE'
            )
            self.stdout.write('üî¥ URGENTE: Filtro combust√≠vel em 500 km (pr√≥xima: 64.500 km)')

        # CEN√ÅRIO 4: Velas OK (n√£o deve aparecer nos alertas)
        if peca_velas:
            registro_velas = RegistroManutencao.objects.create(
                veiculo=veiculo_teste,
                peca=peca_velas,
                data=datetime.now() - timedelta(days=60),
                km=42000,  # 3.000 km atr√°s, ainda tem 27.000 km
                preco=120.00,
                troca=True,
                garantia_meses=24,
                observacoes='√öltima troca velas - CEN√ÅRIO TESTE: OK'
            )
            self.stdout.write('üü¢ OK: Velas com 27.000 km restantes')

        # 7. Criar segundo ve√≠culo para mostrar m√∫ltiplos alertas
        marca_citroen = Marca.objects.filter(nome__icontains='CITRO√ãN').first()
        if marca_citroen:
            modelo_c3 = Modelo.objects.filter(marca=marca_citroen, nome__icontains='C3').first()
            if modelo_c3:
                veiculo2 = Veiculo.objects.filter(usuario=user, marca=marca_citroen).first()
                if not veiculo2:
                    veiculo2 = Veiculo.objects.create(
                        usuario=user,
                        marca=marca_citroen,
                        modelo=modelo_c3,
                        ano=2023,
                        placa='TST-5678',
                        km_atual=38000,
                        combustivel='FLEX'
                    )
                    self.stdout.write(f'üöó Segundo ve√≠culo criado: {veiculo2}')
                else:
                    veiculo2.km_atual = 38000
                    veiculo2.save()

                # Limpar registros antigos
                RegistroManutencao.objects.filter(veiculo=veiculo2).delete()

                # Criar alerta de aten√ß√£o para o segundo ve√≠culo
                if peca_oleo:
                    RegistroManutencao.objects.create(
                        veiculo=veiculo2,
                        peca=peca_oleo,
                        data=datetime.now() - timedelta(days=80),
                        km=36000,  # 2.000 km atr√°s
                        preco=95.00,
                        troca=True,
                        garantia_meses=3,
                        observacoes='√ìleo segundo ve√≠culo - CEN√ÅRIO TESTE'
                    )
                    self.stdout.write('üü° Segundo ve√≠culo: √ìleo em 8.000 km')

        # 8. Testar o sistema de alertas
        self.stdout.write('\nüîç Testando sistema de alertas...')
        alertas = veiculo_teste.get_alertas_ativos()
        
        self.stdout.write(f'\nüìä RESULTADO DOS ALERTAS - {veiculo_teste}:')
        self.stdout.write(f'   KM Atual: {veiculo_teste.km_atual:,} km')
        self.stdout.write(f'   Total de alertas: {len(alertas)}')
        
        for i, alerta in enumerate(alertas, 1):
            cor_texto = 'üî¥' if alerta['urgencia'] == 'urgente' else 'üü°'
            self.stdout.write(f'   {i}. {cor_texto} {alerta["item"]}: {alerta["status"]}')

        # 9. Instru√ß√µes para o usu√°rio
        self.stdout.write('\n' + '='*60)
        self.stdout.write(self.style.SUCCESS('‚úÖ DADOS DE TESTE CRIADOS COM SUCESSO!'))
        self.stdout.write('\nüìã COMO VISUALIZAR OS ALERTAS:')
        self.stdout.write('   1. Inicie o servidor: python manage.py runserver')
        self.stdout.write('   2. Acesse: http://127.0.0.1:8000/')
        self.stdout.write('   3. Fa√ßa login com:')
        self.stdout.write('      üë§ Usu√°rio: teste_alertas')
        self.stdout.write('      üîë Senha: 123456')
        self.stdout.write('\nüéØ VOC√ä DEVE VER:')
        self.stdout.write('   ‚Ä¢ Painel de alertas na tela principal')
        self.stdout.write('   ‚Ä¢ Cards vermelhos e amarelos com alertas')
        self.stdout.write('   ‚Ä¢ Detalhes espec√≠ficos ao entrar na manuten√ß√£o')
        
        self.stdout.write('\nüí° CEN√ÅRIOS CRIADOS:')
        self.stdout.write('   üî¥ √ìleo do motor: VENCIDO')
        self.stdout.write('   üî¥ Filtro combust√≠vel: 500 km restantes')
        self.stdout.write('   üü° Filtro de ar: 2.000 km restantes')
        self.stdout.write('   üü¢ Velas: OK (n√£o aparece nos alertas)')
        
        self.stdout.write('\n' + '='*60)