import re
from django.core.management.base import BaseCommand
from drivecar.models import Marca, Modelo, Versao


class Command(BaseCommand):
    help = 'Padroniza nomes de marcas, modelos e vers√µes seguindo conven√ß√µes'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Apenas mostra o que seria alterado, sem salvar',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        
        self.stdout.write('üìã PADRONIZA√á√ÉO DE NOMES - BIBLIOTECA DE VE√çCULOS')
        self.stdout.write('=' * 55)
        
        if dry_run:
            self.stdout.write('üîç MODO DRY-RUN - Nenhuma altera√ß√£o ser√° salva')
        
        alteracoes_marcas = 0
        alteracoes_modelos = 0
        alteracoes_versoes = 0
        
        # 1. PADRONIZAR MARCAS (SEMPRE MAI√öSCULAS)
        self.stdout.write('\n1. üè∑Ô∏è  PADRONIZANDO MARCAS:')
        marcas = Marca.objects.all()
        
        for marca in marcas:
            nome_original = marca.nome
            nome_padronizado = self.padronizar_marca(nome_original)
            
            if nome_original != nome_padronizado:
                self.stdout.write(f'   üìù {nome_original} ‚Üí {nome_padronizado}')
                if not dry_run:
                    marca.nome = nome_padronizado
                    marca.save()
                alteracoes_marcas += 1
            else:
                self.stdout.write(f'   ‚úÖ {nome_original} (j√° padronizado)')
        
        # 2. PADRONIZAR MODELOS (Title Case, sem marca duplicada)
        self.stdout.write('\n2. üöô PADRONIZANDO MODELOS:')
        modelos = Modelo.objects.all()
        
        for modelo in modelos:
            nome_original = modelo.nome
            nome_padronizado = self.padronizar_modelo(nome_original, modelo.marca.nome)
            
            if nome_original != nome_padronizado:
                self.stdout.write(f'   üìù {modelo.marca.nome}: {nome_original} ‚Üí {nome_padronizado}')
                if not dry_run:
                    modelo.nome = nome_padronizado
                    modelo.save()
                alteracoes_modelos += 1
        
        # 3. PADRONIZAR VERS√ïES (Title Case, sem redund√¢ncias)
        self.stdout.write('\n3. ‚öôÔ∏è  PADRONIZANDO VERS√ïES:')
        versoes = Versao.objects.all()[:20]  # Mostrar apenas algumas para n√£o poluir
        
        for versao in versoes:
            nome_original = versao.nome
            nome_padronizado = self.padronizar_versao(nome_original)
            
            if nome_original != nome_padronizado:
                self.stdout.write(f'   üìù {versao.modelo.marca.nome} {versao.modelo.nome}: {nome_original} ‚Üí {nome_padronizado}')
                if not dry_run:
                    versao.nome = nome_padronizado
                    versao.save()
                alteracoes_versoes += 1
        
        # RELAT√ìRIO FINAL
        self.stdout.write('\n' + '='*55)
        self.stdout.write('üìä RELAT√ìRIO DE PADRONIZA√á√ÉO:')
        self.stdout.write(f'   üè∑Ô∏è  Marcas alteradas: {alteracoes_marcas}')
        self.stdout.write(f'   üöô Modelos alterados: {alteracoes_modelos}')
        self.stdout.write(f'   ‚öôÔ∏è  Vers√µes alteradas: {alteracoes_versoes}')
        
        if dry_run:
            self.stdout.write('\nüîç Para aplicar as altera√ß√µes, execute sem --dry-run')
        else:
            self.stdout.write('\n‚úÖ Padroniza√ß√£o conclu√≠da!')
        
        # DIRETRIZES
        self.stdout.write('\nüìã DIRETRIZES PARA FUTURAS INSER√á√ïES:')
        diretrizes = [
            "üè∑Ô∏è  MARCAS: Sempre em MAI√öSCULAS (ex: TOYOTA, CHEVROLET, CITRO√ãN)",
            "üöô MODELOS: Title Case, sem marca duplicada (ex: Corolla, Onix, C3)",
            "‚öôÔ∏è  VERS√ïES: Title Case, com detalhes t√©cnicos (ex: GLi 2.0 Flex Autom√°tico)",
            "üî§ ACENTOS: Manter acentos originais (Citro√´n, n√£o Citroen)",
            "üö´ REDUND√ÇNCIA: Evitar repetir marca no modelo ou modelo na vers√£o"
        ]
        
        for diretriz in diretrizes:
            self.stdout.write(f'   {diretriz}')

    def padronizar_marca(self, nome):
        """Padroniza nome da marca (MAI√öSCULAS)"""
        return nome.upper().strip()
    
    def padronizar_modelo(self, nome, marca_nome):
        """Padroniza nome do modelo (remove marca duplicada, mant√©m formato adequado)"""
        nome = nome.strip()
        marca_upper = marca_nome.upper()
        
        # Remove marca do in√≠cio se existir
        if nome.upper().startswith(marca_upper):
            nome = nome[len(marca_upper):].strip()
        
        # Preservar siglas e formatos especiais
        preservar_formato = [
            'SUV', 'GT-R', 'CR-V', 'HR-V', 'WR-V', 'RAV4', 'SW4', 'HB20', 'HB20S',
            'ix35', 'i30', 'NSX', 'S2000', 'F-150', 'T-Cross', 'e-Golf', 'ID',
            'C3', 'C4', 'X1H', 'NV200', 'H-1', 'H100', 'EcoSport'
        ]
        
        # Se cont√©m sigla conhecida, n√£o alterar
        for sigla in preservar_formato:
            if sigla.upper() in nome.upper():
                return nome
        
        # Para outros casos, aplicar title case apenas em palavras espec√≠ficas
        palavras = nome.split()
        palavras_padronizadas = []
        
        for palavra in palavras:
            # Preservar par√™nteses e conte√∫do
            if '(' in palavra or ')' in palavra:
                palavras_padronizadas.append(palavra)
            # Preservar n√∫meros e c√≥digos
            elif any(char.isdigit() for char in palavra):
                palavras_padronizadas.append(palavra)
            # Title case para palavras normais
            else:
                palavras_padronizadas.append(palavra.title())
        
        return ' '.join(palavras_padronizadas)
    
    def padronizar_versao(self, nome):
        """Padroniza nome da vers√£o (Title Case b√°sico)"""
        return nome.strip()