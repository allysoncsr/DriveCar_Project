from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from django.contrib import messages
from .models import Veiculo, RegistroManutencao, Peca
from django import forms
from django.urls import reverse
from django.http import HttpResponse
from django.http import JsonResponse, HttpResponseBadRequest
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
import json

# Formul√°rios simples em portugu√™s
class VeiculoForm(forms.ModelForm):
    class Meta:
        model = Veiculo
        fields = ["marca", "modelo", "ano", "placa", "km_atual", "combustivel"]


class RegistroForm(forms.ModelForm):
    class Meta:
        model = RegistroManutencao
        fields = ["data", "km", "preco", "troca", "garantia_meses", "observacoes"]
        widgets = {
            "data": forms.DateInput(attrs={"type": "date", "class": "input"}),
            "km": forms.NumberInput(attrs={"class": "input", "min": "0"}),
            "preco": forms.NumberInput(attrs={"class": "input", "step": "0.01", "min": "0"}),
            "troca": forms.CheckboxInput(attrs={"class": "checkbox"}),
            "garantia_meses": forms.NumberInput(attrs={"class": "input", "min": "0"}),
            "observacoes": forms.Textarea(attrs={"class": "textarea", "rows": 2}),
        }


@login_required
def manutencao(request, veiculo_id):
    veiculo = get_object_or_404(Veiculo, id=veiculo_id, usuario=request.user)
    # agrupar pe√ßas por categoria para exibi√ß√£o
    pecas = Peca.objects.all().order_by("categoria", "nome")
    categorias = {}
    for p in pecas:
        categorias.setdefault(p.get_categoria_display(), []).append(p)
    return render(request, "drivecar/manutencao.html", {"veiculo": veiculo, "categorias": categorias})


@login_required
def registros_peca(request, veiculo_id, peca_id):
    veiculo = get_object_or_404(Veiculo, id=veiculo_id, usuario=request.user)
    peca = get_object_or_404(Peca, id=peca_id)
    saved = False
    if request.method == "POST":
        # Processar dados formatados antes de criar o form
        post_data = request.POST.copy()
        
        # Processar KM formatado (ex: "123,456" -> 123.456)
        if 'km' in post_data:
            km_valor = post_data['km']
            if km_valor:
                try:
                    # Remove R$ e converte v√≠rgula para ponto
                    km_numerico = km_valor.replace('R$', '').replace(' ', '').replace(',', '.')
                    post_data['km'] = str(float(km_numerico))
                    print(f"[DEBUG] KM convertido: '{km_valor}' -> '{post_data['km']}'")
                except ValueError:
                    print(f"[DEBUG] Erro ao converter KM: {km_valor}")
        
        # Processar Pre√ßo formatado (ex: "R$ 1.234,56" -> 1234.56)
        if 'preco' in post_data:
            preco_valor = post_data['preco']
            if preco_valor:
                try:
                    # Remove R$, espa√ßos e pontos (milhares), converte v√≠rgula para ponto
                    preco_numerico = preco_valor.replace('R$', '').replace(' ', '').replace('.', '').replace(',', '.')
                    # Se tem apenas v√≠rgula, √© decimal brasileiro
                    if ',' in preco_valor and '.' not in preco_valor.replace('R$', '').replace(' ', ''):
                        preco_numerico = preco_valor.replace('R$', '').replace(' ', '').replace(',', '.')
                    post_data['preco'] = str(float(preco_numerico))
                    print(f"[DEBUG] Pre√ßo convertido: '{preco_valor}' -> '{post_data['preco']}'")
                except ValueError:
                    print(f"[DEBUG] Erro ao converter pre√ßo: {preco_valor}")
        
        form = RegistroForm(post_data)
        # debug: log POST attempts to help troubleshooting local dev
        try:
            print(f"[DEBUG] registros_peca POST veiculo={veiculo_id} peca={peca_id} data_keys={list(request.POST.keys())}")
            print(f"[DEBUG] Dados processados: km={post_data.get('km')}, preco={post_data.get('preco')}")
        except Exception:
            pass
        if form.is_valid():
            reg = form.save(commit=False)
            reg.veiculo = veiculo
            reg.peca = peca
            reg.save()
            saved = True
            # ap√≥s salvar, limpar o formul√°rio para que o fragmento retornado mostre campos vazios
            form = RegistroForm()
        else:
            # debug: mostrar erros do form no terminal
            try:
                print('[DEBUG] registro form errors:', form.errors)
            except Exception:
                pass
    else:
        form = RegistroForm()

    registros = RegistroManutencao.objects.filter(veiculo=veiculo, peca=peca).order_by("-data")
    
    return render(request, "drivecar/registros_peca_fragment.html", {
        "veiculo": veiculo, 
        "peca": peca, 
        "registros": registros, 
        "form": form, 
        "saved": saved
    })


@csrf_exempt
@login_required
def api_registro_create(request, veiculo_id, peca_id):
    """API simples para criar um RegistroManutencao via JSON POST.
    Espera JSON com chaves: data (YYYY-MM-DD), km (int), preco (decimal), troca (bool), garantia_meses (int|null), observacoes (string)
    Retorna JSON com sucesso e id do registro criado ou erros.
    """
    if request.method != 'POST':
        return HttpResponseBadRequest('Esperado POST')
    try:
        payload = json.loads(request.body.decode('utf-8'))
    except Exception as e:
        return HttpResponseBadRequest(f'JSON inv√°lido: {e}')

    veiculo = get_object_or_404(Veiculo, id=veiculo_id, usuario=request.user)
    peca = get_object_or_404(Peca, id=peca_id)

    # mapear campos
    data = payload.get('data')
    km = payload.get('km')
    preco = payload.get('preco')
    troca = payload.get('troca', False)
    garantia_meses = payload.get('garantia_meses')
    observacoes = payload.get('observacoes', '')

    # valida√ß√µes simples
    errors = {}
    if not data:
        errors['data'] = 'Campo obrigat√≥rio'
    if km is None:
        errors['km'] = 'Campo obrigat√≥rio'
    if preco is None:
        errors['preco'] = 'Campo obrigat√≥rio'

    if errors:
        return JsonResponse({'success': False, 'errors': errors}, status=400)

    # criar registro
    try:
        reg = RegistroManutencao.objects.create(
            veiculo=veiculo,
            peca=peca,
            data=data,
            km=int(km),
            preco=preco,
            troca=bool(troca),
            garantia_meses=(int(garantia_meses) if garantia_meses not in (None, '') else None),
            observacoes=observacoes,
        )
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)}, status=500)

    return JsonResponse({'success': True, 'id': reg.id})

@login_required
def index(request):
    # Filtrar apenas os ve√≠culos do usu√°rio logado
    veiculos = Veiculo.objects.filter(usuario=request.user)
    return render(request, "drivecar/index.html", {"veiculos": veiculos})

@login_required
def cadastrar_veiculo(request):
    if request.method == "POST":
        form = VeiculoForm(request.POST)
        if form.is_valid():
            # Associar o ve√≠culo ao usu√°rio logado antes de salvar
            veiculo = form.save(commit=False)
            veiculo.usuario = request.user
            veiculo.save()
            # Se a requisi√ß√£o vier via HTMX, retorne um HX-Redirect header
            if request.headers.get("HX-Request") == "true":
                resp = HttpResponse()
                resp["HX-Redirect"] = reverse("drivecar:index")
                return resp
            return redirect("drivecar:index")
    else:
        form = VeiculoForm()
    return render(request, "drivecar/cadastrar_veiculo.html", {"form": form})



@login_required
def registros_veiculo(request, veiculo_id):
    # Garantir que o usu√°rio s√≥ acesse seus pr√≥prios ve√≠culos
    veiculo = get_object_or_404(Veiculo, id=veiculo_id, usuario=request.user)
    registros = RegistroManutencao.objects.filter(veiculo=veiculo).select_related("peca").order_by("-data")
    # este template pode ser retornado como fragmento HTMX
    return render(request, "drivecar/registros_fragment.html", {"veiculo": veiculo, "registros": registros})



@login_required
def excluir_veiculo(request, veiculo_id):
    """Exclui um ve√≠culo e todos os seus registros associados"""
    if request.method == "POST":
        veiculo = get_object_or_404(Veiculo, id=veiculo_id, usuario=request.user)
        # Os registros ser√£o exclu√≠dos automaticamente devido ao CASCADE no modelo
        veiculo.delete()
        
        # Se a requisi√ß√£o vier via HTMX, retorne um HX-Redirect header
        if request.headers.get("HX-Request") == "true":
            resp = HttpResponse()
            resp["HX-Redirect"] = reverse("drivecar:index")
            return resp
        return redirect("drivecar:index")
    else:
        # GET request - p√°gina de confirma√ß√£o
        veiculo = get_object_or_404(Veiculo, id=veiculo_id, usuario=request.user)
        return render(request, "drivecar/confirmar_exclusao.html", {"veiculo": veiculo})

@login_required
def excluir_registro(request, veiculo_id, peca_id, registro_id):
    """Exclui um registro de manuten√ß√£o espec√≠fico - Exclus√£o Direta"""
    if request.method == "POST":
        try:
            veiculo = get_object_or_404(Veiculo, id=veiculo_id, usuario=request.user)
            peca = get_object_or_404(Peca, id=peca_id)
            registro = get_object_or_404(RegistroManutencao, id=registro_id, veiculo=veiculo, peca=peca)
            
            print(f"üóëÔ∏è Excluindo registro {registro_id} da pe√ßa {peca.nome}")
            
            # Excluir o registro
            registro.delete()
            
            print(f"‚úÖ Registro {registro_id} exclu√≠do com sucesso!")
            
            # Debug: verificar headers HTMX
            hx_request = request.headers.get('HX-Request')
            has_htmx_attr = hasattr(request, 'htmx') and request.htmx
            print(f"üîç Headers de debug:")
            print(f"   HX-Request: {hx_request}")
            print(f"   X-Requested-With: {request.headers.get('X-Requested-With')}")
            print(f"   Content-Type: {request.headers.get('Content-Type')}")
            print(f"   request.htmx: {has_htmx_attr}")
            print(f"   User-Agent: {request.headers.get('User-Agent', 'N/A')[:50]}...")
            
            # Para HTMX/AJAX: retornar resposta vazia (200 OK)
            if hx_request == 'true' or has_htmx_attr or request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                print("‚ö° HTMX/AJAX detectado - linha ser√° removida automaticamente")
                return HttpResponse("", status=200)
            
            # Requisi√ß√£o normal: redirecionar para a p√°gina de manuten√ß√£o
            print("‚Ü©Ô∏è Requisi√ß√£o normal - redirecionando para p√°gina de manuten√ß√£o...")
            return redirect("drivecar:manutencao", veiculo_id=veiculo_id)
            
        except Exception as e:
            print(f"‚ùå ERRO ao excluir registro: {e}")
            if request.headers.get("HX-Request") == "true":
                return HttpResponse(f"Erro: {e}", status=500)
            return HttpResponse(f"Erro ao excluir registro: {e}", status=500)
    
    return HttpResponseBadRequest("‚ùå M√©todo n√£o permitido")


# =================================== 
# VIEWS DE AUTENTICA√á√ÉO
# ===================================

def login_view(request):
    """View de login personalizada"""
    if request.user.is_authenticated:
        return redirect('drivecar:index')
    
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        
        if username and password:
            user = authenticate(request, username=username, password=password)
            if user is not None:
                login(request, user)
                # Mensagem ser√° mostrada na p√°gina principal, n√£o aqui
                return redirect('drivecar:index')
            else:
                messages.error(request, 'Usu√°rio ou senha incorretos.')
        else:
            messages.error(request, 'Por favor, preencha todos os campos.')
    
    return render(request, 'drivecar/login.html')


def logout_view(request):
    """View de logout"""
    user_name = request.user.first_name or request.user.username
    logout(request)
    messages.success(request, f'At√© logo, {user_name}!')
    return redirect('drivecar:login')


def register_view(request):
    """View de cadastro de usu√°rio"""
    if request.user.is_authenticated:
        return redirect('drivecar:index')
    
    if request.method == 'POST':
        # Verificar se √© uma requisi√ß√£o AJAX (do modal)
        is_ajax = (request.headers.get('X-Requested-With') == 'XMLHttpRequest' or
                  'application/json' in request.headers.get('Accept', ''))
        
        if is_ajax:
            # Processar dados do modal
            usuario = request.POST.get('usuario')
            email = request.POST.get('email')
            senha = request.POST.get('senha')
            repetir_senha = request.POST.get('repetir_senha')
            
            errors = {}
            
            # Valida√ß√µes AJAX
            if not usuario:
                errors['usuario'] = 'Campo obrigat√≥rio'
            elif User.objects.filter(username=usuario).exists():
                errors['usuario'] = 'Este usu√°rio j√° existe'
            
            if not email:
                errors['email'] = 'Campo obrigat√≥rio'
            elif User.objects.filter(email=email).exists():
                errors['email'] = 'Este email j√° est√° cadastrado'
            
            if not senha:
                errors['senha'] = 'Campo obrigat√≥rio'
            elif len(senha) < 6:
                errors['senha'] = 'A senha deve ter pelo menos 6 caracteres'
            
            if not repetir_senha:
                errors['repetir_senha'] = 'Campo obrigat√≥rio'
            elif senha != repetir_senha:
                errors['repetir_senha'] = 'As senhas n√£o coincidem'
            
            if errors:
                return JsonResponse({
                    'success': False,
                    'errors': errors
                })
            
            # Criar usu√°rio
            try:
                user = User.objects.create_user(
                    username=usuario,
                    email=email,
                    password=senha,
                    first_name=usuario
                )
                
                return JsonResponse({
                    'success': True,
                    'message': 'Conta criada com sucesso! Voc√™ ser√° redirecionado para fazer login.'
                })
                
            except Exception as e:
                return JsonResponse({
                    'success': False,
                    'errors': {'general': f'Erro ao criar conta: {str(e)}'}
                })
        
        else:
            # Processar dados da p√°gina normal
            username = request.POST.get('username')
            password = request.POST.get('password')
            password_confirm = request.POST.get('password_confirm')
            first_name = request.POST.get('first_name')
            email = request.POST.get('email')
            
            # Valida√ß√µes normais
            if not all([username, password, password_confirm, first_name]):
                messages.error(request, 'Por favor, preencha todos os campos obrigat√≥rios.')
            elif password != password_confirm:
                messages.error(request, 'As senhas n√£o coincidem.')
            elif len(password) < 6:
                messages.error(request, 'A senha deve ter pelo menos 6 caracteres.')
            elif User.objects.filter(username=username).exists():
                messages.error(request, 'Este nome de usu√°rio j√° est√° em uso.')
            elif email and User.objects.filter(email=email).exists():
                messages.error(request, 'Este email j√° est√° cadastrado.')
            else:
                # Criar usu√°rio
                try:
                    user = User.objects.create_user(
                        username=username,
                        password=password,
                        first_name=first_name,
                        email=email
                    )
                    messages.success(request, f'Conta criada com sucesso! Bem-vindo, {first_name}!')
                    # Fazer login autom√°tico ap√≥s cadastro
                    login(request, user)
                    return redirect('drivecar:index')
                except Exception as e:
                    messages.error(request, 'Erro ao criar conta. Tente novamente.')
    
    return render(request, 'drivecar/register.html')

